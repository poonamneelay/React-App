{"version":3,"sources":["listItem.js","App.js","serviceWorker.js","index.js"],"names":["listItem","props","listitem","items","map","item","className","id","key","value","text","onChange","e","updateItem","target","onClick","deleteItems","library","add","faTrash","App","state","currentitem","handleInput","bind","addItem","deleteItem","updateitem","this","setState","Date","now","preventDefault","newItem","console","log","newitems","filteredItems","filter","searchkey","itemList","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAsBeA,MAnBf,SAAkBC,GACd,IAEMC,EAFMD,EAAME,MAEGC,KAAI,SAAAC,GACrB,OAAO,yBAAKC,UAAU,OAAOC,GAAIF,EAAKG,KAC1B,2BAAG,2BAAOC,MAAOJ,EAAKK,KAAMH,GAAIF,EAAKG,IAAKG,SACtC,SAACC,GAAKX,EAAMY,WAAWD,EAAEE,OAAOL,MAAMJ,EAAKG,QAG/C,0BAAMD,GAAG,SAASQ,QAAS,kBAAId,EAAMe,YAAYX,EAAKG,OAAM,2CAM5E,OACI,6BAAMN,I,cCbde,IAAQC,IAAIC,K,IA6DGC,E,kDA1Db,WAAYnB,GAAO,IAAD,8BAChB,cAAMA,IACDoB,MAAM,CACTlB,MAAM,GACNmB,YAAY,CACVZ,KAAK,GAAGF,IAAI,KAGhB,EAAKe,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKE,WAAW,EAAKA,WAAWF,KAAhB,gBAChB,EAAKG,WAAW,EAAKA,WAAWH,KAAhB,gBAXA,E,wDAcNZ,GACVgB,KAAKC,SAAS,CAACP,YAAY,CAACZ,KAAKE,EAAEE,OAAOL,MAAMD,IAAIsB,KAAKC,W,8BAInDnB,GACNA,EAAEoB,iBACF,IAAMC,EAAQL,KAAKP,MAAMC,YAEzB,GADAY,QAAQC,IAAIF,GACM,KAAfA,EAAQvB,KAAU,CACnB,IAAM0B,EAAS,GAAD,mBAAKR,KAAKP,MAAMlB,OAAhB,CAAsB8B,IAEpCL,KAAKC,SAAS,CAAC1B,MAAMiC,EAASd,YAAY,CAACZ,KAAK,GAAGF,IAAI,S,iCAIhDA,GACT,IAAM6B,EAAcT,KAAKP,MAAMlB,MAAMmC,QAAO,SAAAjC,GAAI,OAAEA,EAAKG,MAAMA,KAC7DoB,KAAKC,SAAS,CAAC1B,MAAMkC,M,iCAGZ5B,EAAM8B,GACf,IAAMC,EAASZ,KAAKP,MAAMlB,MAC1BqC,EAASpC,KAAI,SAAAC,GACRA,EAAKG,MAAM+B,IACZlC,EAAKK,KAAKD,MAGdmB,KAAKC,SAAS,CAAC1B,MAAMqC,M,+BAIvB,OACE,yBAAKlC,UAAU,OACb,0BAAMC,GAAG,aAAakC,SAAUb,KAAKH,SACnC,2BAAOhB,MAAOmB,KAAKP,MAAMC,YAAYZ,KAAMC,SAAUiB,KAAKL,YAAamB,YAAY,kBACnF,gCAAS,oCAEX,kBAAC,EAAD,CAAUvC,MAAOyB,KAAKP,MAAMlB,MAAOa,YAAaY,KAAKF,WAAYb,WAAYe,KAAKD,kB,GArDtEgB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.341b53af.chunk.js","sourcesContent":["import React from 'react';\nimport ListItem from './listItem.css';\n\nfunction listItem(props){\n    const items=props.items;\n\n    const listitem=items.map(item =>{\n        return <div className=\"list\" id={item.key}>\n                    <p><input value={item.text} id={item.key} onChange={\n                        (e)=>{props.updateItem(e.target.value,item.key)}\n                    }></input>\n             \n                    <span id='delete' onClick={()=>props.deleteItems(item.key)}><b>DELETE</b></span>\n                    \n                    </p>\n               \n               </div>\n    })\n    return(\n        <div>{listitem}</div>\n    );\n}\nexport default listItem;","import React from 'react';\nimport './App.css';\nimport ListItem from './listItem.js';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      currentitem:{\n        text:'',key:''\n      }\n    }\n    this.handleInput=this.handleInput.bind(this);\n    this.addItem=this.addItem.bind(this);\n    this.deleteItem=this.deleteItem.bind(this);\n    this.updateitem=this.updateitem.bind(this);\n  }\n\n  handleInput(e){\n    this.setState({currentitem:{text:e.target.value,key:Date.now()}});\n\n  }\n\n  addItem(e){\n    e.preventDefault();\n    const newItem=this.state.currentitem;\n    console.log(newItem);\n    if(newItem.text!==\"\"){\n      const newitems=[...this.state.items,newItem];\n      \n      this.setState({items:newitems,currentitem:{text:'',key:''}});\n    }\n  }\n\n  deleteItem(key){\n    const filteredItems=this.state.items.filter(item=>item.key!==key);\n    this.setState({items:filteredItems});\n  }\n\n  updateitem(value,searchkey){\n    const itemList=this.state.items;\n    itemList.map(item=>{\n      if(item.key===searchkey){\n        item.text=value;\n      }\n    })\n    this.setState({items:itemList});\n  }\n\n  render(){\n  return (\n    <div className='App'>\n      <form id='to-do-form' onSubmit={this.addItem}>\n        <input value={this.state.currentitem.text} onChange={this.handleInput} placeholder='Enter here...'></input>\n        <button ><b>Add</b></button>\n      </form>\n      <ListItem items={this.state.items} deleteItems={this.deleteItem} updateItem={this.updateitem}/>\n    </div>\n    \n  );\n}\n  }\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}